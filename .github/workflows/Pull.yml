# Triggered by any pull request from repository
name: Pull Request

on:
  pull_request:
  pull_request_review:
    types:
      - submitted

jobs:
  Requests_Build:
    uses: ./.github/workflows/BuildingSetUp.yml # Reusable workflow
    
  Requests_AddReviewer:
    name: Adding Reviewer
    needs: Requests_Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Reviewer
        id: toadd_reviewers
        # Defines Reviewer = (default) Technical Lead | Developer review Technical Lead
        run: |
          AUTHOR=${{ github.event.pull_request.user.login }}
          if [ "$AUTHOR" == "koayyiting" ]; then
            REVIEWERS="ng-zi-yi"
          else
            REVIEWERS="koayyiting"
          fi
          echo "::set-output name=reviewers::$REVIEWERS"

      # Add Reviewer to Pull Request
      - name: Add Reviewers
        uses: madrapps/add-reviewers@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          reviewers: ${{ steps.toadd_reviewers.outputs.reviewers }}
          re-request-when-changes-requested: true

      # Retrieve Reviews approved
      - name: Get Review Status
        id: get_reviews
        run: |
          sudo apt-get install jq -y
          PR_NUMBER=${{ github.event.pull_request.number }}
          REVIEWS=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews")
          
          APPROVED_REVIEWS=$(echo "$REVIEWS" | ConvertTo-JSON | jq -r '.[] | select(.state == "APPROVED") | length // 0')
          echo "::set-output name=approved_reviews::$APPROVED_REVIEWS"
          echo "::set-output name=review:::$REVIEWS"
          
      - name: Check Review
        run: |
          echo "Approved Reviews: ${{ steps.get_reviews.outputs.approved_reviews }}"
          echo "Review: ${{ steps.get_reviews.outputs.review }}"

  Response_Review:
    name: Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review'
    steps:
      # Retrieve Reviews approved
      - name: Get Review Status
        id: get_reviews
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REVIEWS=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews")

          if [[ "$(echo "$REVIEWS" | jq '. | length')" -eq 0 ]]; then
            APPROVED_REVIEWS=0
          else
            APPROVED_REVIEWS=$(echo "$REVIEWS" | jq -r '.[] | select(.state == "APPROVED") | length')
          fi
          echo "::set-output name=approved_reviews::$APPROVED_REVIEWS"

      - name: Check Review
        run: |
          echo "Approved Reviews: ${{ steps.get_reviews.outputs.approved_reviews }}"

      - name: Request for Changes
        if: github.event.review.state == 'changes_requested'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get Changed Files
        if: github.event.review.state == 'changes_requested'
        id: changed-markdown-files
        uses: tj-actions/changed-files@v42
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-markdown-files.outputs.all_changed_files }}

      # Create Issue for Test Cases Failing
      - name: Create Issue for Failed Test
        if: github.event.review.state == 'changes_requested'
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: "[REQUEST CHANGES] PR#${{ github.event.pull_request.number }} "
          body: |
            **Files Changed -**
            
            [${{ steps.changed-markdown-files.outputs.all_changed_files }}](https://github.com/${{ github.repository }}/tree/${{ github.event.pull_request.head.ref }}/${{ steps.changed-markdown-files.outputs.all_changed_files }})
            
            [View Code on GitHub](https://github.com/${{ github.repository }}/tree/${{ github.event.pull_request.head.ref }})
            
            **Comment -**
            ${{ github.event.review.body }}
          assignees: ${{ github.event.pull_request.user.login }}

  Merge_Request:
    name:  Review Approved, Merge
    needs: Response_Review
    if: ${{ github.event.review.state == 'APPROVED' }} && ${{ needs.get_reviews.outputs.approved_reviews }} >= 1
    runs-on: ubuntu-latest
    steps:         
      # Retrieve Pull Request status of checks
      - uses: actions/checkout@v4
      - name: Get Check Status
        uses: danieldeichfuss/get-status@v0.0.10
        id: get-status
        with:
          ref: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Add automerge label to be able to run pascalgn/automerge-action@v0.16.2 successfully 
      - uses: actions/checkout@v3
      - name: Label Pull Request as automerge
        if: ${{ github.event.review.state == 'APPROVED' }} && ${{ steps.get-status.outputs.all-checks-completed == 'true' && steps.get-status.outputs.all-checks-passed == 'true' }} && ${{ startsWith(github.event.comment.body, '/add-labels') }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: automerge

      # Merge Pull Request action 
      - uses: actions/checkout@v4
      - name: Auto Merge Pull Request
        uses: "pascalgn/automerge-action@v0.16.2"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          merge_commit_message: "${{ github.event.pull_request.number }} - Merged PR#${{ github.event.pull_request.number }} "
          merge_method: merge
