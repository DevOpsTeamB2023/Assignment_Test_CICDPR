#Trigger when there is a push to main
name: Continuous Integration

on:
  pull_request:
    types: [closed]
    branches:
      - main
  push:
    branches:
      - main
    
jobs:
  # Set up necessary installs
  Build_SetUp:
    name: Build SetUp
    uses: ./.github/workflows/BuildingSetUp.yml

  # Reference to Test Cases in repository
  Testing:
    name: Run Test Cases
    needs: Build_SetUp
    runs-on: ubuntu-latest
    steps:
    # Run installation of pytest in Testing from BuildingSetUp.yml
    - name: Check PyTest Installation
      if: ${{ ! needs.Build_SetUp.outputs.pytest_installed }}
      run: pip install pytest pytest-cov

    # [Edit] Retrieving from set Repository
    - name: Checkout Codes
      uses: actions/checkout@v4
      with:
        repository: DevOpsTeamB2023/Assignment_Test_CICDPR

    # [Edit] Retrieve Test Cases from Test folder and Code from Source Code folder
    - name: Use Test Cases
      if: always()
      run: |
        cd $GITHUB_WORKSPACE/testcase
        pytest -v --cov=../sourcecode --junitxml=report.xml

    # Create Issue for Failed Workflow
    - if: ${{ failure() }}
      name: Create Issue on Failed workflow
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Issue - `${{ github.workflow }}` failed.
        body: |
          cat testresults/report.xml
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`
          assignees: `${{ github.actor }}`
        assignees: lacsadoshaniahsantiago, koayyiting

    # [Edit] Check testcase directory
    - name: Display testcase directory and content
      run: |
        ls -la testcase           # List contents of testcase directory
        cat testcase/report.xml   # Print contents of report.xml

    # Create testcase directory and move test results in new directory
    - name: Create Test Results Folder
      run: |
        mkdir testresults
        if [[ -f testcase/report.xml ]]; then    #Check if report exists
          mv testcase/report.xml ./testresults
        else
          echo "report.xml not found in testcase directory."
          exit 1 #Exit with an error code
        fi
    
    # Upload test results into as artifact
    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with: 
        name: testResults
        path: testresults

  # Create Issue for Failing Test Results
  Test_Fail:
    name: Test Results Fail
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Download Remote Test Results
        uses: actions/download-artifact@v2
        with:
          name: testResults

      - name: Check Contents
        run: |
          cat testResults
          
      - name: Check Test Results
        run: |
          FAILED_TESTS=$(jq '.testsuite.testcase[] | select(.failure != null) | report.xml)
          if [[ -n "$FAILED_TESTS" ]]; then
            echo "Failed tests found: $FAILED_TESTS"
            exit 1  # Signal failure
          else
            echo "All tests passed."
          fi

      - name: Create Issue on Test Failure
        if: ${{ failure() }}  # Only runs if the "Check Test Results" step failed
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: "Tests Failed in ${{ github.workflow }} "
          body: |
            **Commit:** ${{ github.sha }}
            **Report:** [report.xml](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}/artifacts/report.xml)

  # Showcase Test Results
  Test_Results:
    name: Save Test Results
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Download Remote Test Results
      uses: actions/download-artifact@v2
      with:
        name: testResults

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        junit_files: "report.xml"
