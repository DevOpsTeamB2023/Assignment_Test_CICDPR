# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Continuous Integration
on:
  push:
    branches: [main]
    
jobs:
  build:
    name: Build and Test for Integration
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' 

    - name: Install plugin
      run: |
        pip install pytest pytest-cov
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install flake8 pytest
        pip install coverage pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Checkout codes
      uses: actions/checkout@v4
      with:
        repository: DevOpsTeamB2023/Assignment_Test_CICDPR
        
  test:
    name: Testing Project
    runs-on: ubuntu-latest
    steps:
    - name: Anlayse code for any syntax errors
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Use Test Cases
      if: always()
      run: |
        pytest -v --cov=sourcecode/test.py --cov-report xml:coverage.xml --junitxml=report.xml

    - if: ${{ failure() }}
      name: Create Issue on Failed workflow
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Action workflow Workflow name - `${{ github.workflow }}` failed.
        body: |
          ### Context
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`
          assignees: `${{ github.actor }}`
          
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        junit_files: "report.xml"

    - name: Create Test Results Folder
      run: |
        mkdir testresults
        mv report.xml ./testresults
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with: 
        name: testResults
        path: testresults 
    
    - name: Download Remote Test Results
      uses: actions/download-artifact@v2
      with:
        name: testResults
