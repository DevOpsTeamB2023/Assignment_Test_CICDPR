name: Test Deployment
on:
  workflow_run:
    workflows:
      - "Continuous Integration"
    types:
      - completed

jobs:

  get_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: get the version number from commit message and create issue if not tag
        id: get_version
        run: |
          # Extract version number from the commit message eg. v1.0.0: added feature 2.0
          version_number=$(git log --format=%B -n 1 ${{ github.sha }} | awk '/^v[0-9]+\.[0-9]+\.[0-9]+/{print $1}')
          
          # Debugging: Print version number
          echo "Version Number: '$version_number'"

          # Set the version_number as an output
          echo "::set-output name=version_number::${version_number}"
  create_issue:
    needs: get_version
    runs-on: ubuntu-latest
    if: ${{ needs.get_version.outputs.version_number == '' }}
    steps:
      - name: Log version number
        run: echo "Version Number:${{ needs.get_version.outputs.version_number }}"
      - name: create issue for empty version number
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Action workflow Workflow name - `${{ github.workflow }}` failed.
          body: |
            ### Context
            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
            Workflow name - `${{ github.workflow }}`
            Job -           `${{ github.job }}`
            status -        `${{ job.status }}`
            assignees: `${{ github.actor }}`
        
  git_release:
    needs: get_version
    name: Release to Git for Deployment
    runs-on: ubuntu-latest
    if: ${{ needs.get_version.outputs.version_number != '' }}

    steps:
      - name: Set environment version
        run: echo "RELEASE_VERSION=${{ needs.get_version.outputs.version_number }}" >> $GITHUB_ENV
  
      - name: Create a release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          body: |
            Release notes for v${{ env.RELEASE_VERSION }}.
